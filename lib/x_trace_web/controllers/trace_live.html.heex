<div id="cc" class="hidden" phx-hook="cc"></div>

<header class="px-4 sm:px-6 lg:px-8 h-fit border-b border-zinc-100">
  <div class="flex items-center justify-between py-3">
    <div class="text-2xl text-brand font-semibold leading-6">
      X-Trace
    </div>
    <div class="flex items-center gap-4">
      <.button type="button" phx-click="download-logs">Dump Logs</.button>
      <.button type="button" phx-click="trace" disabled={@disabled} class="col-span-2">Start Trace</.button>
      <.button type="button" phx-click="clear">Clear All</.button>
      <.button type="button" phx-click="menu">Menu</.button>
    </div>
  </div>
</header>

<% current_node = to_string(@node) %>

<div id="xterm" class={["flex-1 w-full bg-black pl-4", @menu? && "hidden"]} phx-hook="xterm_hook" phx-update="ignore" />
<div id="menu" class={["flex-1 overflow-y-auto flex flex-col", not @menu? && "hidden"]}>
  <div class="flex flex-1">
    <div id="left-panel" class="flex-1 w-full flex flex-col">
      <ul class="flex flex-wrap space-x-4 -mb-px text-center">
        <li class="tab" phx-click="set-tab" phx-value-tab={tab} :for={tab <- ~w"node specs max options local-settings"}>
          <span class={@tab==tab && "tab-active"}>
            <%= String.upcase(tab) %>
          </span>
        </li>
      </ul>

      <div class="flex-1 w-full">
        <.form id="trace-form" :let={f} for={@form} phx-change="validate">
          <div class="font-medium">

            <%!-- node settings tab --%>
            <div class={["max-w-6xl mx-auto px-10 p-6 space-y-4", @tab != "node" && "hidden"]} id="node-tab">

              <ul class="flex space-x-4">
                <li class="border-gray-400" :for={n <- @nodes}>
                  <div phx-value-node={n} class={["shadow border select-none cursor-pointer rounded-md p-4", 
                  n != current_node && "hover:ring-indigo-500 hover:ring-offset-indigo-200 hover:ring-2 hover:ring-offset-2",
                  n == current_node && "bg-blue-500"]} {if n == current_node, do: [], else: [{"phx-click", "change-node"}]}>
                    <%= n %>
                  </div>
                </li>
              </ul>

              <%= if @node != :"nonode@nohost" do %>
                <div class="grid grid-cols-2 gap-4">
                  <.input field={f[:connect_node]} label="Node to connect" placeholder="name@domain" />
                  <.input field={f[:connect_cookie]} label="Cookie" placeholder="if empty will use value of Node.get_cookie()" />
                  <.button type="button" class="w-full" phx-click="connect-node"
                    disabled={is_nil(f[:connect_node].value) || f[:connect_node].value == ""}>Connect</.button>
                  <.button type="button" class="w-full" phx-click="reset-node">Reset node</.button>
                </div>
              <% else %>
                <div class="grid grid-cols-2 gap-x-2">
                  <.input field={f[:node_name]} label="Name" />
                  <div id="node_domain-c" class="relative" tabindex="1" phx-blur={JS.hide(to: "#domain-select-modal", transition: "fade-out-scale")}>
                    <.input field={f[:node_domain]} label="Domain" disabled={f[:is_long_name].value == "false"}
                    phx-focus={JS.show(to: "#domain-select-modal", transition: "fade-in-scale") |> JS.focus(to: "#node_domain-c")} />
                    <div id="domain-select-modal" class="bg-white min-w-full absolute left-0 top-20 shadow shadow-red-400 border rounded-md p-4 hidden">
                      <ul class="flex space-x-2">
                        <li :for={d <- @domains}>
                          <div class="shadow border select-none cursor-pointer rounded-md p-2" 
                          phx-click={JS.set_attribute({"value", d}, to: "input[name=node_domain]") |> JS.dispatch("change", to: "input[name=node_domain]")}>
                            <%= d %>
                          </div>
                        </li>
                      </ul>
                    </div>
                  </div>
                  
                  <div></div>
                  <.input field={f[:is_long_name]} label="LongName" type="checkbox" />
                  <.input field={f[:cookie]} label="Cookie" placeholder="if empty will use value of ~/.erlang.cookie" />
                  <.button type="button" class="mt-8" phx-click="setup-node">Setup</.button>
                </div>
              <% end %>
            </div>

            <%!-- specs settings tab --%>
            <div class={["max-w-6xl mx-auto px-10 p-6 space-y-4", @tab != "specs" && "hidden"]} id="specs-tab">
              <div class="text-gray-500">
                The basic calls take the trace patterns as tuples of the form
                `{Module, Function, Args}' where:

                <ul>
                  <li>`Module' is any atom representing a module</li>
                  <li>`Function' is any atom representing a function, or the wildcard
                    <code>'_'</code></li>
                  <li>`Args' is either the arity of a function (`0..255'), a wildcard
                    pattern (<code>'_'</code>), a
                    <a href="http://learnyousomeerlang.com/ets#you-have-been-selected" target="_blank">match specification</a>,
                    or a function from a shell session that can be transformed into
                    a match specification</li>
                </ul>
              </div>

              <div class="px-4 text-center grid grid-cols-3 gap-x-12" :if={not Enum.empty?(@t_specs)}>
                <div class="flex space-x-2" :for={{t_spec, index} <- Enum.with_index(@t_specs)}>
                  <span><%= inspect(t_spec, limit: :infinity) %></span>
                  <div phx-click="del-t_spec" phx-value-at={index})}>
                    <.icon name="hero-x-mark"/>
                  </div>
                </div>
              </div>

              <div class="px-4 grid grid-cols-3 gap-4">
                <.input field={f[:module]} label="Module" list="module-list" />
                <datalist id="module-list">
                  <option :for={m <- @module_list}><%= m %></option>
                </datalist>
                <.input field={f[:fun]} label="Fun" list="fun-list" />
                <datalist id="fun-list">
                  <option :for={f <- @fun_list}><%= f %></option>
                </datalist>
                <.input field={f[:args]} label="Args" list="args-list" />
                <datalist id="args-list">
                  <option :for={a <- @args_list}><%= a %></option>
                </datalist>
              </div>
              <div class="text-center">
                <.button type="button" phx-click="add-tspec" class="w-1/2" disabled={@add_tspec_disabled}>Add</.button>
              </div>
            </div>

            <%!-- max settings tab --%>
            <div class={["max-w-6xl mx-auto px-10 p-6 space-y-4", @tab != "max" && "hidden"]} id="max-tab">
              <div class="text-gray-500">
              The limit was also set using `{10,100}' instead of an integer, making the
              rate-limiting at 10 messages per 100 milliseconds, instead of an absolute
              value.
              </div>

              <div class="grid grid-cols-2 gap-4">
                <.input field={f[:max]} label="Max" type="number" />
                <.input field={f[:milliseconds]} label="Milliseconds" type="number" />
              </div>
            </div>

            <%!-- options settings tab --%>
            <div class={["max-w-6xl mx-auto px-10 p-6 space-y-4", @tab != "options" && "hidden"]} id="options-tab">
              <div class="text-gray-500">
                Scope is useful whenever you want to track the changes of code in a process that isn't called
                with `Module:Fun(Args)', but just `Fun(Args)'.
                <ul>
                  <li>'global' - Fully qualified function calls are traced, not calls made internally.</li>
                  <li>'local' - To force tracing of local calls.</li>
                </ul>

                <br/>
                Pid specifications let you decide which processes to target. They can be
                specific pids, `all' pids, `existing' pids, or `new' pids (those not
                spawned at the time of the function call).
              </div>

              <% pids = @options[:pid] %>
              <div class="px-4 text-center grid grid-cols-4 gap-x-12" :if={is_list(pids) and not Enum.empty?(pids)}>
                <div class="flex space-x-2" :for={{pid, index} <- Enum.with_index(pids)}>
                  <span><%= inspect(pid, limit: :infinity) %></span>
                  <div phx-click="del-pid" phx-value-at={index})}>
                    <.icon name="hero-x-mark"/>
                  </div>
                </div>
              </div>

              <div class="grid grid-cols-2 gap-4">
                <.input field={f[:scope]} label="Scope" type="select" options={~w"global local"} />
                <.input field={f[:pid]} label="Pid type" type="select" options={~w"all new existing pid"} />
                <.input field={f[:pid_str]} label="Pid" placeholder="A.B.C" :if={f[:pid].value == "pid"} />
                <.button type="button" class="mt-8" phx-click="add-pid" :if={f[:pid].value == "pid"} disabled={@add_pid_disabled}>Add</.button>
              </div>
            </div>

            <%!-- local settings tab --%>
            <div class={@tab != "local-settings" && "hidden"} id="local-settings-tab">
              <div class="text-sm" phx-update="ignore" id="local-settings">
                <div x-data="local_settings">
                  <%!-- liveview call js function: save_current_setting --%>
                  <button id="ls-save" type="button" class="hidden" @click="save_current_setting()">nil</button>
                  <button id="ls-download" type="button" class="hidden" @click="download_settings()">nil</button>
                  <input type="file" id="ls-upload" class="hidden" name="ls-upload" accept=".json"/>
                  <div>
                    <template x-for="(item, index) in items" x-bind:key="index">
                      <div x-bind:id="'ls-'+ index" class="flex select-none cursor-pointer border-b border-dashed border-gray-400" x-bind:class="select_index == index && 'bg-gray-100 font-bold'">
                        
                        <div @click="select(index)" class="flex-1 py-3 ml-8">
                          <span class="font-bold">TSpecs:</span>
                          <pre x-text="item.t_specs"></pre>
                          <span class="font-bold">Max:</span>
                          <pre x-text="item.max"></pre>
                          <span class="font-bold">Options:</span>
                          <pre x-text="item.options"></pre>
                        </div>

                        <div class="grid grid-rows-2 text-indigo-900">
                          <div @click="apply(index)" class="bg-blue-50 icon-btn">
                            <.icon name="hero-play-circle-solid"/>
                          </div>
                          <div @click="remove(index)" class="bg-red-50 icon-btn">
                            <.icon name="hero-x-circle-solid"/>
                          </div>
                        </div>

                      </div>
                    </template>
                  </div>
                </div>
              </div>
            </div>

          </div>
        </.form>
      </div>
    </div>

    <div id="right-panel" class="w-1/3 border-l border-zinc-100">
      <div class="flex-1 p-4">
        <div class="space-y-4">
          <div>
            <span class="cursor-pointer text-xl font-bold" phx-click="set-tab" phx-value-tab="node">Node:</span><br/>
            Is Self Node: <%= @self? %><br/>
            Code Server mode: <%= @code_server_mode %><br/>
            Trace Node: <span class="select-all font-bold"><%= @node %></span>
          </div>

          <div>
            <span class="cursor-pointer text-xl font-bold" phx-click="set-tab" phx-value-tab="specs">TSpecs:</span><br/>
            <pre class="select-all"><%= inspect_value(@t_specs) %></pre>
          </div>

          <div>
            <span class="cursor-pointer text-xl font-bold" phx-click="set-tab" phx-value-tab="max">Max:</span><br/>
            <pre class="select-all"><%= inspect_value(@max) %></pre>
          </div>

          <div>
            <span class="cursor-pointer text-xl font-bold" phx-click="set-tab" phx-value-tab="options">Options:</span><br/>
            <pre class="select-all"><%= inspect_value(@options) %></pre>
          </div>
        </div>

        <div class="mt-24 text-center grid grid-cols-2 gap-x-4 gap-y-2">
          <.button type="button" phx-click="trace" disabled={@disabled}>Start Trace</.button>
          <.button type="button" phx-click="clear">Clear All</.button>

          <.button type="button" phx-click="reset-settings">Reset Settings</.button>
          <.button type="button" phx-click={JS.dispatch("click", to: "#ls-save")} disabled={@disabled}>Save Settings</.button>
          
          <.button :if={@tab == "local-settings"} type="button" phx-click={JS.dispatch("click", to: "#ls-upload")}>
            Import Settings
          </.button>

          <.button :if={@tab == "local-settings"} type="button" phx-click={JS.dispatch("click", to: "#ls-download")}>
            Download All Settings
          </.button>
        </div>
      </div>
    </div>
  </div>

  <div id="bottom-panel" class="border-t border-zinc-100 h-10 py-2 place-content-center text-center">
    <div class="max-w-3xl mx-auto grid grid-cols-4 text-sm text-gray-500 divide-x divide-gray-400">
      <a href={~p"/dashboard"} target="_blank">Dashboard</a>
      <a href="https://hexdocs.pm/recon/recon_trace.html" target="_blank">Document</a>
      <a href="https://github.com/feng19" target="_blank">Author: feng19</a>
      <a href="https://github.com/feng19/x_trace" target="_blank">Github</a>
    </div>
  </div>
</div>